#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# MediaWiki command-line Swiss Army Knife.  Run with --help to see more.
# https://github.com/OpenTechStrategies/csv2wiki/blob/master/mwiki-sak
#
# Copyright (C) 2017 Open Tech Strategies, LLC
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

__doc__ = """\
mwiki-sak: the MediaWiki Swiss Army Knife (command-line access to MediaWiki)

Usage: mwiki-sak -c CONFIG_FILE [OPTIONS] SUBCOMMAND [ARGUMENTS]

CONFIG_FILE has the same format as cvs2wiki's config file, but only
the wiki credentials fields are used.

Subcommands:

  list:                                 List all pages in the wiki
  delete -f infile | PAGE1 [PAGE2...]:  Delete specified pages

Options:

  -f FILE | --infile FILE:              Read args from FILE, one per line

mwiki-sak is free / open source software under the AGPL-3.0 license.
Please run with --version option for details.
"""

import mwclient
import getopt
import os
import sys
import configparser
import warnings
import requests  # for exception matching


def usage(errout=False):
    """Print a message explaining how to use this script.
    Print to stdout, unless ERROUT, in which case print to stderr."""
    out = sys.stderr if errout else sys.stdout
    out.write(__doc__)


def version(errout=False):
    """Print a message explaining how to use this script.
    Print to stdout, unless ERROUT, in which case print to stderr."""
    out = sys.stderr if errout else sys.stdout
    out.write("""mwiki-sak version 1.0.0.
    
    Copyright (C) 2017, 2018 Open Tech Strategies, LLC

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n""")
    

def main():
    config = None
    infile = None

    try:
        opts, args = getopt.getopt(sys.argv[1:], 
                                   'hv?c:f:',
                                   ["help",
                                    "version",
                                    "usage",
                                    "infile=",
                                    "config=",])
    except getopt.GetoptError as err:
        sys.stderr.write("ERROR: '%s'\n" % err)
        usage(errout=True)
        sys.exit(2)

    for o, a in opts:
        if o in ("-h", "-?", "--help", "--usage",):
            usage()
            sys.exit(0)
        elif o in ("-v", "--version",):
            version()
            sys.exit(0)
        elif o in ("-f", "--infile",):
            infile = a
        elif o in ("-c", "--config",):
            config = configparser.ConfigParser()
            config.read(a)
        else:
            sys.stderr.write("ERROR: unrecognized option '%s'\n" % o)
            sys.exit(2)

    wiki_url    = config.get('default', 'wiki_url')
    username    = config.get('default', 'username')
    password    = config.get('default', 'password')
    path_to_api = config.get('default', 'path_to_api', fallback="/")

    # Connect to the site.
    try:
        site_conn = mwclient.Site(wiki_url.split("://"), path=path_to_api)
    except requests.exceptions.HTTPError as err: 
        sys.stderr.write("ERROR: failed to connect to wiki URL '%s'\n" % wiki_url)
        sys.stderr.write("       Error details:\n")
        sys.stderr.write("       ('%s')\n" % err)
        sys.exit(1)
    try:
        site_conn.login(username, password)
    except mwclient.errors.LoginError as err:
        sys.stderr.write("ERROR: Unable to log in to wiki; "
                         "check that username and password are correct.\n")
        sys.stderr.write("       Error details:\n")
        sys.stderr.write("       ('%s')\n" % err)
        sys.exit(1)

    # Subcommand dispatch.
    if len(args) < 1:
        sys.stderr.write("ERROR: subcommand argument required.\n")
        usage(True)
        sys.exit(1)
    elif args[0].lower() == "help":
        usage()
    elif args[0].lower() == "list":
        # This is basically the command-line equivalent of
        # wiki.example.com/api.php?action=query&list=allpages
        #
        # Except we're going to print them out in sorted order,
        # because a common use case is to get a list of pages, delete
        # some of them, and then get a list again to make sure that
        # exactly the ones requested to be deleted were deleted.  To
        # do that comparison, it helps to have the list sorted.  The
        # same logic probably applies to other uses of page lists.
        page_names = []
        for page in site_conn.pages:
            page_names.append(page.name)
        page_names.sort()
        for page_name in page_names:
            print("%s" % page_name)
    elif args[0].lower() == "delete":
        if len(args) == 1 and infile is None:
            sys.stderr.write(
                "ERROR: 'delete' requires arguments or the --infile option\n")
            sys.exit(1)
        if len(args) > 1 and infile is not None:
            sys.stderr.write(
                "ERROR: cannot combine command-line arguments with --infile\n")
            sys.exit(1)
        if len(args) > 1:
            for page_name in args[1:]:
                page = site_conn.pages[page_name]
                try:
                    page.delete()
                except mwclient.errors.APIError as e:
                    sys.stderr.write(
                        "ERROR: unable to delete page '%s':\n       %s\n"
                        % (page_name, e.info))
        else:
            with open(infile) as infile_fp:
                for line in infile_fp:
                    page = site_conn.pages[line.rstrip('\n')]
                    try:
                        page.delete()
                        # Deleting the page in the wiki doesn't delete
                        # the page object here, so page.name can still
                        # be dereferenced.
                        print("DELETED PAGE '%s'" % page.name)
                    except mwclient.errors.APIError as e:
                        raise Exception(
                            "ERROR: unable to delete page: '%s'" % e.info)


if __name__ == '__main__':
    main()
